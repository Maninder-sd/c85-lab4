CSC C85 - Code Optimization - 2021
_______________________________________________________________________

Team name: Team Snowforest

Name 1 (last, first): Dhanauta, Maninder
Student number 1: 1004877608

Name 2 (last, first):
Student number 2:

If applicable:
Name 3 (last, first):
Student number 3:

(Special: Lose marks for failing to complete the above)
_______________________________________________________________________

Questions:

0) On the same computer, and with no other applications open:

   - Run vanilla version, compiled as per the compile script (no compiler
     optimization) and list: Vanilla (no compiler opt) FPS = 
     
   - Run your optimized code, compiled without compiler optimization
     and list: Your Code (no compiler opt) FPS =

   - Run vanilla code compiled with flag -O3 for compiler optimization
     and list: Vanilla (compiler optimized) FPS =
     
   - Run your optimized code, compiled with flag -O3
     and list: Your Code (compiler optimized) FPS =
     
     What is the ratio of your code (compiler optimized) to vanilla
     with no compiler optimization?
     
     Ratio = Vanilla(no compiler opt) FPS / Your code(compiler optimized) FPS
           =
     
a) Look at the profiler output for vanilla_imageRescale(). Identify the
   lines that you think are un-necessary bottlenecks (i.e. lines whose
   CPU usage can be reduced or eliminated by careful coding).

   List these bottleneck lines in descending order (i.e. the ones that
   consume most time at the top) of CPU time. Please list
	- The actual line of code
	- The amount of time taken
	(you can copy/paste from the profiler output)

   For each line, explain why the line creates a bottleneck (in terms
   of what you know about CPU architecture). I want specific reasons
   why a line you listed takes a large chunk of CPU time.
 
 ANS:
 
#line CEst Source
418 6.45    getPixel(src,floor(fx),floor(fy),src_x,&R1,&G1,&B1);        // get N1 colours
    Function calls are expensive because it requires adding to the stack frame 
    I got rid of the function call by copy pasting the function's content and remove floor() function call as well 
420 5.68    getPixel(src,floor(fx),ceil(fy),src_x,&R3,&G3,&B3);        // get N3 colours  
    Function calls are expensive because it requires adding to the stack frame 
    I got rid of the function call by copy pasting the function's content and remove floor() function call as well 
443 4.30    *(R)=*(image+((x+(y*sx))*3)+0);
    there are many operations (including multiplication) and reading/writing happening
    We will move the repetitive pointer arithmatic ["i" will be the value"(x+(y*sx))*3)"] into a variable and read from variable 
453 4.43     *(image+((x+(y*sx))*3)+1)=G;
    there are many operations (including multiplication) and reading/writing happening
    We will move the repetitive pointer arithmatic "((x+(y*sx))*3)" into a variable and read from variable 
427 4.23      GT2=(dx*G4)+(1-dx)*G3;
428 3.44      BT2=(dx*B4)+(1-dx)*B3;
426 3.42     RT2=(dx*R4)+(1-dx)*R3;
423 3.41        RT1=(dx*R2)+(1-dx)*R1;
425 3.41           BT1=(dx*B2)+(1-dx)*B1;

b) For each of the lines in a)

   Describe what you did in fast_imageRescale() to reduce/resolve the
   problem.

   Explain why your improvement should work (again, based on what you
   know about CPU architecture).

c) List any other optimizations you performed in your code and why they
   help increase speed
   
   We removed the two loops and made it into a single loop. This reduses the number of branches. Since this condition is only false once, the branch is also predictable and misses only once. 
   
   We r

d) Is there any part of the vanilla code that could not be optimized
   at all? if so, which?
   
e) Now run your code with cache sim on. Identify the lines that you see
   causing cache misses, and for each of these please list:
   
    - The line of code
    - The number of cache misses it caused
    (you can copy/paste from the profiler output)
    
   Describe any strategy you can come up with that may help reduce these
   cache misses.

f) Do you think you have achieved close to optimal performance on this
   code? (yes/no)

g) If your answer to d) is no, what could you do to further increase
   performance?

______________________________________________________________________

Grading

Programming exercise
	- Competitive performance of your code	 	/80	
             Your FPS multiplier:     (Max:  )

Answers in this report					        /20

Penalty marks (TA assigned)			  

Total for this exercise:			   	/100 (*)

(*) This mark is conditional to all team members being able to explain
    any part of the work when questioned.
